SHELL := /bin/bash
arch ?= $(shell tools/arch-tag)
subproject_names = anax anax-ui
subprojects = $(addprefix bld/,$(subproject_names))

version := $(shell cat VERSION)
version_tail = $(addprefix ~ppa~,$(1))
aug_version = $(addsuffix $(call version_tail,$(2)),$(1)$(version))
pkg_version = $(call aug_version,-,$(1))
file_version = $(call aug_version,_,$(1))

git_repo_prefix = ssh://git@github.com/open-horizon

# only returns names of distributions that are valid for this architecture
distribution_names = $(shell find pkgsrc/deb/meta/dist/* -maxdepth 0 -exec bash -c 'for d; do if grep -q "$(arch)" "$${d}/arch"; then echo $$(basename $$d);  fi; done ' _ {} +)
release_only = $(lastword $(subst ., ,$1))

pkg_stub = $(foreach dname,$(distribution_names),dist/$(1)$(call pkg_version,$(dname)))
# just representative of sources, there are other artifacts generated by debuild -S...

meta = $(addprefix meta-,$(distribution_names))

src-packages = $(addsuffix .dsc,$(call pkg_stub,horizon))

bin_stub = $(addsuffix _$(arch).deb,$(call pkg_stub,$1))
bluehorizon_deb_packages = $(foreach nameprefix, bluehorizon bluehorizon-ui, $(call $(addsuffix _all.deb,$(nameprefix))))
other_config_deb_packages = $(foreach nameprefix, horizon-wiotp, $(call $(addsuffix _all.deb,$(nameprefix))))
horizon_deb_packages = $(call bin_stub,horizon)
packages = $(horizon_deb_packages) $(bluehorizon_deb_packages)

debian_shared = $(shell find ./pkgsrc/deb/shared/debian -type f | sed 's,^./pkgsrc/deb/shared/debian/,,g' | xargs)

docker_tag_prefix := horizon

all: meta

ifndef verbose
.SILENT:
endif

bld:
	mkdir -p bld

bld/%/.git/logs/HEAD: | bld
	git clone $(git_repo_prefix)/$*.git "$(CURDIR)/bld/$*"
	cd $(CURDIR)/bld/$* && \
	if [ "$($(*)-branch)" != "" ]; then git checkout $($(*)-branch); else \
	  if [[ "$$(git tag -l $(docker_tag_prefix)/$(version))" != "" ]]; then \
	  	git checkout -b "$(docker_tag_prefix)/$(version)-b" $(docker_tag_prefix)/$(version); \
		fi; \
	fi

bld/%/.git-gen-changelog: bld/%/.git/logs/HEAD | bld
	bash -x tools/git-gen-changelog "$(CURDIR)/bld/$*" "$(CURDIR)/pkgsrc/deb/meta/changelog.tmpl" "$(docker_tag_prefix)/$(version)"

bld/changelog.tmpl: pkgsrc/deb/meta/changelog.tmpl $(addsuffix /.git-gen-changelog,$(subprojects))
	mkdir -p bld
	if [[ "$$(cat pkgsrc/deb/meta/changelog.tmpl | head -n1 | grep $(version))" != "" ]]; then \
		cp pkgsrc/deb/meta/changelog.tmpl bld/changelog.tmpl; \
	else \
		tools/render-debian-changelog "++DISTRIBUTIONS++" "$(version)" "++VERSIONSUFFIX++" bld/changelog.tmpl pkgsrc/deb/meta/changelog.tmpl $(shell find bld -iname ".git-gen-changelog"); \
	fi

dist/horizon$(call pkg_version,%)/debian:
	mkdir -p dist/horizon$(call pkg_version,$*)/debian

clean: clean-src mostlyclean
	@echo "Use distclean target to revert all configuration, in addition to build artifacts, and clean up horizon_$(version) branch"
	-rm -f bld/changelog.tmpl
	-rm -Rf horizon* bluehorizon*
	-rm -Rf bld

clean-src:
	for src in $(subprojects); do \
		if [ -e $$src ]; then \
		  cd $$src && \
			git checkout . && \
			git reset --hard HEAD && \
			git clean -fdx; \
	  fi; \
	done

mostlyclean:
	-rm -Rf dist
	for src in $(subprojects); do \
		if [ -e $$src ]; then \
			cd $$src && $(MAKE) clean; \
	  fi; \
	done

distclean: clean
	@echo "distclean"
	# TODO: add other files to reset that might have changed?
	-@git reset VERSION
	-@git checkout master && git branch -D horizon_$(version)

# both creates directory and fills it: this is not the best use of make but it is trivial work that can stay flexible
dist/horizon$(call pkg_version,%)/debian/fs-horizon: $(shell find pkgsrc/seed) | dist/horizon$(call pkg_version,%)/debian
	dir=dist/horizon$(call pkg_version,$*)/debian/fs-horizon && \
		mkdir -p $$dir && \
		./pkgsrc/mk-dir-trees $$dir && \
		cp -Ra ./pkgsrc/seed/horizon/fs/. $$dir && \
		echo "SNAP_COMMON=/var/horizon" > $$dir/etc/default/horizon && \
		envsubst < ./pkgsrc/seed/dynamic/horizon.tmpl >> $$dir/etc/default/horizon && \
		./pkgsrc/render-json-config ./pkgsrc/seed/dynamic/anax.json.tmpl $$dir/etc/horizon/anax.json.example && \
		cp pkgsrc/mk-dir-trees $$dir/usr/horizon/sbin/

dist/horizon$(call pkg_version,%)/debian/fs-horizon-wiotp: $(shell find pkgsrc/seed) | dist/horizon$(call pkg_version,%)/debian
	dir=dist/horizon$(call pkg_version,$*)/debian/fs-horizon-wiotp && \
		mkdir -p $$dir && \
		cp -Ra ./pkgsrc/seed/horizon-wiotp/fs/. $$dir && \
		envsubst < ./pkgsrc/seed/horizon-wiotp/dynamic/horizon.tmpl >> $$dir/etc/default/horizon && \
		./pkgsrc/render-json-config ./pkgsrc/seed/horizon-wiotp/dynamic/anax.json.tmpl $$dir/etc/horizon/anax.json

dist/horizon$(call pkg_version,%)/debian/fs-bluehorizon: dist/horizon$(call pkg_version,%)/debian/fs-horizon $(shell find pkgsrc/seed) | dist/horizon$(call pkg_version,%)/debian
	dir=dist/horizon$(call pkg_version,$*)/debian/fs-bluehorizon && \
		mkdir -p $$dir && \
		cp -Ra ./pkgsrc/seed/bluehorizon/fs/. $$dir && \
		cp dist/horizon$(call pkg_version,$*)/debian/fs-horizon/etc/horizon/anax.json.example $$dir/etc/horizon/anax.json

# meta for every distribution, the target of horizon_$(version)-meta/$(distribution_names)
dist/horizon$(call pkg_version,%)/debian/changelog: bld/changelog.tmpl | dist/horizon$(call pkg_version,%)/debian
	sed "s,++DISTRIBUTIONS++,$(call release_only,$*) $(addprefix $(call release_only,$*)-,updates testing unstable),g" bld/changelog.tmpl > dist/horizon$(call pkg_version,$*)/debian/changelog
	sed -i.bak "s,++VERSIONSUFFIX++,$(call version_tail,$*),g" dist/horizon$(call pkg_version,$*)/debian/changelog && rm dist/horizon$(call pkg_version,$*)/debian/changelog.bak

# N.B. This target will copy all files from the source to the dest. as one target
$(addprefix dist/horizon$(call pkg_version,%)/debian/,$(debian_shared)): $(addprefix pkgsrc/deb/shared/debian/,$(debian_shared)) | dist/horizon$(call pkg_version,%)/debian
	cp -Ra pkgsrc/deb/shared/debian/. dist/horizon$(call pkg_version,$*)/debian/
	# next, copy specific package overwrites if they exist
	if [[ "$(ls pkgsrc/deb/meta/dist/$*/debian/*)" != "" ]]; then \
		cp -Rva pkgsrc/deb/meta/dist/$*/debian/* dist/horizon$(call pkg_version,$*)/debian/; \
	fi

dist/horizon$(call file_version,%).orig.tar.gz: dist/horizon$(call pkg_version,%)/debian/fs-horizon-wiotp dist/horizon$(call pkg_version,%)/debian/fs-horizon dist/horizon$(call pkg_version,%)/debian/fs-bluehorizon dist/horizon$(call pkg_version,%)/debian/changelog $(addprefix dist/horizon$(call pkg_version,%)/debian/,$(debian_shared))
	for src in $(subprojects); do \
		bash -c "cd $${src} && make deps"; \
		rsync -a --exclude=".git*" $(PWD)/$$src dist/horizon$(call pkg_version,$*)/; \
		if [ -e $${src}-rules.env ]; then \
			cp $${src}-rules.env dist/horizon$(call pkg_version,$*)/$$(basename $$src)/rules.env; \
		fi; \
	done
	find dist/ -iname ".keep" -exec rm -f {} \;
	tar -c -C dist/horizon$(call pkg_version,$*) . | gzip -n > dist/horizon$(call file_version,$*).orig.tar.gz

$(src-packages):
dist/horizon$(call pkg_version,%).dsc: dist/horizon$(call file_version,%).orig.tar.gz
	@echo "Running src pkg build in $*'"
	cd dist/horizon$(call pkg_version,$*) && \
		debuild --preserve-envvar arch -a$(arch) -us -uc -S --lintian-opts --allow-root -X cruft,init.d,binaries

$(other_config_deb_packages):
dist/horizon-wiotp$(call pkg_version,%)_all.deb:
$(bluehorizon_deb_packages):
dist/bluehorizon$(call pkg_version,%)_all.deb:
dist/bluehorizon-ui$(call pkg_version,%)_all.deb:
$(horizon_deb_packages):
dist/horizon$(call pkg_version,%)_$(arch).deb: dist/horizon$(call pkg_version,%).dsc
	@echo "Running bin pkg build in $*'"
	cd dist/horizon$(call pkg_version,$*) && \
		debuild --preserve-envvar arch -a$(arch) -us -uc -b --lintian-opts --allow-root

$(meta): meta-%: bld/changelog.tmpl dist/horizon$(call file_version,%).orig.tar.gz
ifndef skip-precheck
	tools/meta-precheck $(CURDIR) "$(docker_tag_prefix)/$(version)" $(subprojects)
endif
	@echo "================="
	@echo "Metadata created"
	@echo "================="
	@echo "Please inspect dist/horizon$(call pkg_version,$*), the shared template file bld/changelog.tmpl, and VERSION. If accurate and if no other changes exist in the local copy, execute 'make publish-meta'. This will commit your local changes to the canonical upstream and tag dependent projects. The operation requires manual effort to undo so be sure you're ready before executing."

meta: $(meta)

src-packages: $(src-packages)

packages: $(packages)

publish-meta-bld/%:
	@echo "+ Visiting publish-meta subproject $*"
	tools/git-tag 0 "$(CURDIR)/bld/$*" "$(docker_tag_prefix)/$(version)"

publish-meta: $(addprefix publish-meta-bld/,$(subproject_names))
	git checkout -b horizon_$(version)
	cp bld/changelog.tmpl pkgsrc/deb/meta/changelog.tmpl
	git add ./VERSION pkgsrc/deb/meta/changelog.tmpl
	git commit -m "updated package metadata to $(version)"
	git push --set-upstream origin horizon_$(version)

show-distribution-names:
	@echo $(distribution_names)

show-subprojects:
	@echo $(subprojects)

show-src-packages:
	@echo $(src-packages)

show-packages:
	@echo $(packages)

# make these "precious" so Make won't remove them
.PRECIOUS: dist/horizon$(call file_version,%).orig.tar.gz bld/%/.git/logs/HEAD dist/horizon$(call pkg_version,%)/debian $(addprefix dist/horizon$(call pkg_version,%)/debian/,$(debian_shared) changelog fs-horizon fs-bluehorizon fs-horizon-wiotp)

.PHONY: clean clean-src $(meta) mostlyclean publish-meta publish-meta-bld/% show-distribution-names show-packages show-subprojects
