#!/bin/bash

# This script is to be used to poll a horizon-deb-packager git repo to recognize a 
# version change and successful release asset generation, update an apt repository
  
# some initial default values
GIT_API="api.github.com"
REPO="open-horizon/horizon-deb-packager"
TRAVIS_API="api.travis-ci.org"
INCOMING_DIR="/vol/aptrepo-local/repositories/incoming"
SEMAPHORE="/tmp/$(basename "$0").sem"
LOGFILE="/tmp/$(basename "$0").log"
STATUS="FAILED"
DETAILS="Initial setup, check $(hostname):$LOGFILE"

slack_alert() {
  curl -s -X POST -d "{'username': 'apt-poller', 'text': '$STATUS: $DETAILS', 'icon_emoji': ':debian:'}"  "https://hooks.slack.com/services/${SLACK_HOOK}"
  if [ "$STATUS" == "FAILED" ]; then
    curl -s -X POST -d "{'username': 'apt-poller', 'text': 'Once the failure is resolved, rebuild and rmdir $(hostname):$SEMAPHORE', 'icon_emoji': ':debian:'}" "https://hooks.slack.com/services/${SLACK_HOOK}"
  fi
}

exit_tasks() {
  echo "$(date) Exit tasks"
  if ([ -n "$SLACK_HOOK" ]) && ([ "$STATUS" == "FAILED" ] || [[ "$DETAILS" = *"apt repo updated from"* ]]); then
    slack_alert
  fi
  echo "$STATUS: $DETAILS"

  if [ "$STATUS" == "SUCCESS" ]; then
    rmdir "$SEMAPHORE"
  fi
}

# Define usage
usage () {
  echo -e "\\nUsage:\\n
  \\t-a\\tFull URL to an apt repo Packages file for version comparison (No default)
  \\t-g\\tGithub api (Default: api.github.com)
  \\t-h\\tHelp, prints this usage
  \\t-i\\tIncoming directory (Default: /vol/aptrepo-local/repositories/incoming)
  \\t-r\\tOrg/repo for git and travis (default: open-horizon/horizon-deb-packager)
  \\t-s\\tSlack Hook key (Optional)
  \\t-t\\tTravis api (Defualt: api.travis-ci.org)
  "
  exit
}

while getopts ":a:g:hi:r:s:t:" opt; do
  case $opt in
    a) PACKAGES_URL="$OPTARG"
    ;;
    g) GIT_API="$OPTARG"
    ;;
    h) usage
    ;;
    i) INCOMING_DIR="$OPTARG"
    ;;
    r) REPO="$OPTARG"
    ;;
    s) SLACK_HOOK="$OPTARG"
    ;;
    t) TRAVIS_API="$OPTARG"
    ;;
    *) usage
    ;;
  esac
done
  
# logging and initial configuration
exec 3>&1 4>&2
trap 'exec 2>&4 1>&3' 0 1 2 3
exec 1>> "$LOGFILE" 2>&1
trap exit_tasks EXIT
date
set -ex

# semaphore creation/check
if mkdir "$SEMAPHORE"; then
  echo "Only instance running after clean exit, continuing"
else
  echo "Semaphore directory $SEMAPHORE exists, another instance is running or exited uncleanly, investigate /tmp/$(basename "$0").log"
  STATUS="BLOCKED"
  exit
fi
  

# needs to be defined
if [ -z "$PACKAGES_URL" ]; then exit; fi

# comparing the git version and existing apt version to see if we need to update
DETAILS="Checking for updates"
GIT_VERSION=$(curl -s -H 'Accept: application/vnd.github.v3.raw' "https://$GIT_API/repos/$REPO/contents/VERSION")
APT_VERSION=$(curl -s "$PACKAGES_URL" | grep -A 2 'Package: horizon' | grep -m 1 'Version:' | awk -F ' |~' '{print $2}')

if dpkg --compare-versions "$GIT_VERSION" gt "$APT_VERSION"; then
  echo Downloading new content
else
  echo Nothing to update
  STATUS="SUCCESS"
  exit
fi

# making sure the travis build is complete, and was successful ... it will also stop here before the initial travis build
DETAILS="Travis build wait"
if [ "$(curl -s https://$TRAVIS_API/repos/$REPO/builds | jq -r .[0].state)" != "finished" ]; then
  STATUS="SUCCESS"
  exit
fi

# if finished and not successful, then something broke
if [ "$(curl -s https://$TRAVIS_API/repos/$REPO/builds | jq -r .[0].result)" != 0 ]; then
  exit
fi

# grab the release assets, assemble the short DIST for later indexing use
DETAILS="Downloading the release"
for asset in $(curl -s "https://$GIT_API/repos/$REPO/releases/latest" | jq -r '.assets[].browser_download_url' | grep assets.tar.gz); do
  echo "Downloading $asset"
  DISTRO=$(echo "$asset" | awk -F "v$GIT_VERSION.|.assets" '{print $3}')
  DIST=$(echo "$DISTRO" | awk -F "." '{print $2}')
  REPO=$(echo "$DISTRO" | awk -F "." '{print $1}')

  # build a unique array of short-name distros as we go
  EXISTS=0
  for element in "${DIST_ARRAY[@]}"; do
    if [[ "$element" == "$DIST" ]]; then
      EXISTS=1
    break
    fi
  done
  if [ $EXISTS == "0" ]; then
    DIST_ARRAY+=("$DIST")
  fi

  # same for repos
  EXISTS=0
  for element in "${DIST_ARRAY[@]}"; do
    if [[ "$element" == "$REPO" ]]; then
      EXISTS=1
    break
    fi
  done
  if [ $EXISTS == "0" ]; then
    REPO_ARRAY+=("$REPO")
  fi

  if [ ! -d "$INCOMING_DIR/$DISTRO" ]; then
    mkdir -p "$INCOMING_DIR/$DISTRO"
  fi 

  curl -sL "$asset" | tar -xvz -C "$INCOMING_DIR/$DISTRO"
  rm -f $INCOMING_DIR/$DISTRO/*.sha256.txt
done

# index each distro
DETAILS="Release artifacts downloaded, initiating indexing"
if [ -n "$SLACK_HOOK" ]; then
  STATUS="SUCCESS"
  slack_alert
  STATUS="FAILED"
  DETAILS="Indexing release"
fi
for repo in ${REPO_ARRAY[@]}; do
  /usr/bin/docker exec -i horizon-aptrepo /bin/bash -c "for dist in ${DIST_ARRAY[*]}; do if [[ \$(grep incoming-\${dist} /var/repositories/${repo}/conf/incoming) ]]; then reprepro -v -b /var/repositories/${repo} processincoming incoming-\${dist}; else echo \"Intentionally skipping indexing of $repo \$dist\"; fi; done"
done

# loop until all versions are updated, give up after 15 minutes
BASE_URL=$(echo "$PACKAGES_URL" | awk -F '/linux/' '{print $1}')/linux/
CHECK_PACKAGES=($(find "$INCOMING_DIR" -name '*.deb' -type f | grep -v 'all\.deb' | awk -F 'ppa~' '{print $NF}' | sort -u | awk -F '\\.|_' '{print "'$BASE_URL'"$1"/dists/"$2"-testing/main/binary-"$3"/Packages"}'))
for i in {1..15}; do
  CURRENT=true
  for URL in "${CHECK_PACKAGES[@]}"; do
    VERSION=$(curl -s "$URL" | grep -A 2 'Package: horizon' | grep -m 1 'Version:' | awk -F ' |~' '{print $2}')
    if echo "$VERSION" | grep -q "$GIT_VERSION"; then
      echo "Updated $VERSION - $URL"
    else
      echo "Not Updated $VERSION - $URL"
      CURRENT=false
      break
    fi
  done

  if $CURRENT; then
    break
  else
    echo "Not finished indexing, waiting 1 minute and checking again"
  fi
  sleep 60
done

# made it through with no errors
DETAILS="apt repo updated from $APT_VERSION to $GIT_VERSION"
STATUS="SUCCESS"
