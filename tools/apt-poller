#!/bin/bash

# This script is to be used to poll a horizon-deb-packager git repo to recognize a 
# version change and successful release asset generation, update an apt repository
  
# some initial default values
STATUS="FAILED"
SECTION="INITIAL SETUP"
GIT_API="api.github.com"
REPO="open-horizon/horizon-deb-packager"
TRAVIS_API="api.travis-ci.org"
INCOMING_DIR="/vol/aptrepo-local/repositories/incoming"

slack_alert() {
  if [[ "$MSG" =~ "FAILED" ]] || [[ "$MSG" =~ "COMPLETED" ]]; then
    curl -s -X POST -d "{'username': 'apt-poller', 'text': '$MSG', 'icon_emoji': ':debian:'}"  "https://hooks.slack.com/services/${SLACK_HOOK}"
  fi
}

exit_tasks() {
  echo "$(date) Exit tasks"
  if [ "$SECTION" == '' ]; then
    MSG="$STATUS"
  else
    MSG="$STATUS: In section $SECTION"
  fi
  if [ -n "$SLACK_HOOK" ]; then
    slack_alert
  fi
  echo "$MSG"
}

# Define usage
usage () {
  echo -e "\\nUsage:\\n
  \\t-a\\tFull URL to an apt repo Packages file for version comparison (No default)
  \\t-g\\tGithub api (Default: api.github.com)
  \\t-h\\tHelp, prints this usage
  \\t-i\\tIncoming directory (Default: /vol/aptrepo-local/repositories/incoming)
  \\t-r\\tOrg/repo for git and travis (default: open-horizon/horizon-deb-packager)
  \\t-s\\tSlack Hook key (Optional)
  \\t-t\\tTravis api (Defualt: api.travis-ci.org)
  "
  exit
}

while getopts ":a:g:hi:r:s:t:" opt; do
  case $opt in
    a) APT_PACKAGES="$OPTARG"
    ;;
    g) GIT_API="$OPTARG"
    ;;
    h) usage
    ;;
    i) INCOMING_DIR="$OPTARG"
    ;;
    r) REPO="$OPTARG"
    ;;
    s) SLACK_HOOK="$OPTARG"
    ;;
    t) TRAVIS_API="$OPTARG"
    ;;
    *) usage
    ;;
  esac
done

# logging and initial configuration
exec 3>&1 4>&2
trap 'exec 2>&4 1>&3' 0 1 2 3
exec 1>> "/tmp/$(basename "$0").log" 2>&1
trap exit_tasks EXIT
date
set -ex

# needs to be defined
if [ -z "$APT_PACKAGES" ]; then exit; fi

# comparing the git version and existing apt version to see if we need to update
SECTION="VERSION CHECK"
GIT_VERSION=$(curl -s -H 'Accept: application/vnd.github.v3.raw' https://${GIT_API}/repos/${REPO}/contents/VERSION)
APT_VERSION=$(curl -s "$APT_PACKAGES" | grep -A 2 'Package: horizon' | grep -m 1 'Version:' | awk -F ' |~' '{print $2}')

if dpkg --compare-versions "$GIT_VERSION" gt "$APT_VERSION"; then
  echo Downloading new content
else
  echo Nothing to update
  STATUS="CURRENT"
  exit
fi

# making sure the travis build is complete, and was successful ... it will also stop here before the initial travis build
SECTION="TRAVIS CHECK"
if [ "$(curl -s https://${TRAVIS_API}/repos/${REPO}/builds | jq -r .[0].state)" != "finished" ]; then
  STATUS="WAITING"
  exit
fi

# if finished and not successful, then something broke
if [ "$(curl -s https://${TRAVIS_API}/repos/${REPO}/builds | jq -r .[0].result)" != 0 ]; then
  exit
fi

# grab the release assets, assemble the short DIST for later indexing use
SECTION="DOWNLOADING RELEASE"
for asset in $(curl -s https://${GIT_API}/repos/${REPO}/releases/latest | jq -r '.assets[].browser_download_url' | grep assets.tar.gz); do
  echo "Downloading $asset"
  DISTRO=$(echo "$asset" | awk -F "v$GIT_VERSION.|.assets" '{print $3}')
  DIST=$(echo "$DISTRO" | awk -F "." '{print $2}')

  # build a unique array of short-name distros as we go
  EXISTS=0
  for element in "${DIST_ARRAY[@]}"; do
    if [[ "$element" == "$DIST" ]]; then
      EXISTS=1
    break
    fi
  done
  if [ $EXISTS == "0" ]; then
    DIST_ARRAY+=("$DIST")
  fi

  if [ ! -d "$INCOMING_DIR/$DISTRO" ]; then
    mkdir -p "$INCOMING_DIR/$DISTRO"
  fi 

  curl -sL "$asset" | tar -xvz -C "$INCOMING_DIR/$DISTRO"
  rm -f "$INCOMING_DIR/$DISTRO/*.sha256.txt"
done

# index each distro
SECTION="INDEXING RELEASE"
/usr/bin/docker exec -i horizon-aptrepo /bin/bash -c "for dist in ${DIST_ARRAY[*]}; do reprepro -v -b /var/repositories/ubuntu processincoming incoming-\${dist}; done"

# made it through with no errors
SECTION=''
STATUS="COMPLETED: apt-repo updated to $GIT_VERSION"
