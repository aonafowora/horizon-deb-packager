#!/bin/bash -x

#
# TODO: improvements:
# 1. Make agent smarter, it should parse the horizon-deb-packager changelog and build+push all old versions
# 2. Improve error handling

usage="Usage: $0 sleep_s prj_dir repo_url_stub_templ publish_destination_stub notification dist.rel1,dist.rel2..."

if [ "$#" -lt 5 ]; then
  (>&2 echo "Missing required argument(s). $usage")
  exit 1
fi

sleep_s=$1
prj_dir="$2"
repo_url_stub_templ="$3"
publish_destination_stub="$4"
notification="$5"
only_distrel="$6"

VERSION_PREFIX=""
ARCH=""
DIST_RELEASE=""
TMPDIR=${TMPDIR:=/tmp}

function control_c() {
  exit 0
}

trap control_c SIGINT SIGQUIT

function notification_payload() {
  read -r -d '' payload <<EOF
    {
      "username": "Horizon watch-builder on $(hostname)",
      "text": "$1"
    }
EOF

  echo "$payload" | jq -c '.'
}

function notify() {
  if [[ "${notification}" != "log" ]]; then
    notification_payload "$1" | curl -X POST --data-binary @- "$notification"
  else
    echo "Skipping web notification"
  fi
}

# depends on side effects: sets global vars
function clone_prj() {
  if [[ ! -d ${prj_dir}/.git ]]; then
    git clone https://github.com/open-horizon/horizon-deb-packager.git $prj_dir
  else
    (mkdir -p $prj_dir; cd $prj_dir && \
      git reset --hard HEAD && \
      git clean -df && \
      make distclean && \
      git pull)
  fi

  VERSION_PREFIX="$(cat ${prj_dir}/VERSION)"
  ARCH="$(${prj_dir}/tools/arch-tag)"
  DIST_RELEASE="$(cd $prj_dir && make show-packages | xargs -n1 | grep -oP "dist/.*~\K([^_]+)" | sort | uniq | xargs)"
}

# an empty return is an error
function artifact_versions() {
  url="$1"

  # single line of versions published, like this: "2.0.10b 2.0.7 2.0.9"
  wget -4 -q -O $TMPDIR/hzn-deb-pkg-versions.gz "${url}" 2> /dev/null
  ret=$?
  if [[ $ret == 8 ]]; then
    # a server error, perhaps a 404, or empty file: let it build and attempt later push
    echo "-88"
    return
  elif [[ $ret > 0 ]]; then
    (>&2 echo "Failed to determine existing deb package versions.")
    echo ""
    return
  else
    (cd $TMPDIR && gunzip -f hzn-deb-pkg-versions.gz)
    # check if empty
    if [[ ! -s $TMPDIR/hzn-deb-pkg-versions ]]; then
      echo "-99"
      return
    fi

    echo $(grep -oP 'Version: \K([^~]+)' $TMPDIR/hzn-deb-pkg-versions | sort | uniq | xargs)
    return
  fi
}

# an empty return indicates version not found
function indexed_or_queued() {
  # to pass this check, the $VERSION_PREFIX has to be in the URL
  url="$1"

  # to pass this check, all files in list have to be in publish_dest
  publish_dest="$2"
  files="${@:3}"

  versions=$(artifact_versions "$url")
  if [[ $? > 0 ]]; then
    (>&2 echo "Error checking if artifact is indexed.")
    echo ""
    return
  fi

  echo "$versions" | grep -q "$VERSION_PREFIX"
  if [[ $? == 0 ]]; then
    # already in index, don't need to build this version
    echo ""
    return
  fi

  # this version not indexed but could be queued for indexing, check before returning that it should be built
  # note: a trailing slash in publish_dest is really important
  queued=$(rsync -nr --out-format='%n' ${publish_dest} /dev/false)
  for ix in $files; do
    if [ ! $(echo "$queued" | grep -q $ix) ]; then
      # missing file in queue need to build this version
      echo "$VERSION_PREFIX"
      return
    fi

    # didn't short-circuit, all files in the queue
    echo "" && return
  done
}

function binary_version() {
  echo "${VERSION_PREFIX}~ppa~${1}.${2}_${ARCH}"
}

function source_version() {
  echo "${VERSION_PREFIX}~ppa~${1}.${2}"
}

function build_publish() {
  dist="$1"
  rel="$2"
  packages_url="$3"
  sources_url="$4"

  expected_binaries="horizon_$(binary_version $dist $rel).changes horizon_$(binary_version $dist $rel).deb bluehorizon_$(binary_version $dist $rel).deb"
  expected_sources="horizon_$(source_version $dist $rel).debian.tar.xz horizon_$(source_version $dist $rel).dsc horizon_$(source_version $dist $rel).orig.tar.gz"
  upload_destination="${publish_destination_stub}/${dist}.${rel}/"

  if [[ "$(indexed_or_queued "$packages_url" "${upload_destination}" $expected_binaries)" == "$VERSION_PREFIX" ]]; then
    echo "$VERSION_PREFIX not yet indexed for our architecture ($ARCH). Building package and submitting it to queue."
    (
      cd $prj_dir
      mkdir -p bld
      echo "GOPATH_CACHE=/root/go/.cache" > bld/anax-rules.env
      artifacts="$(make show-packages | xargs -n1 | grep "${dist}.${rel}" | xargs)"

      notify "Building artifacts $artifacts"
      make git_repo_prefix=https://github.com/open-horizon verbose=y mostlyclean $artifacts
      if [[ "$?" != 0 ]]; then
        # TODO: add notification here
        (>&2 echo "Failed to build $artifacts")
        return
      fi

      # ignore-existing ensures that this doesn't overwrite previously-written files of the same name
      push_list=$(echo "$expected_binaries $expected_sources" | xargs -n1 | xargs -I% echo "${prj_dir}/dist/%" | xargs)

      # do the push
      notify "Pushing $push_list to $upload_destination"
      rsync -avz --ignore-existing --progress --stats $push_list "${upload_destination}"
    )
  else
    echo "$VERSION_PREFIX binaries already indexed for our architecture ($ARCH) or in queue."
  fi
}

while true; do
  # build check interval
  sleep $sleep_s

  clone_prj

  for dr in ${DIST_RELEASE}; do
    IFS='.' read -ra draddr <<< "$dr"

    if [[ "$only_distrel" == "" ]] || [[ "$(echo "$only_distrel" | grep "${dr}")" != "" ]]; then

      url_c=$(echo "$repo_url_stub_templ" | sed "s,##DIST##,${draddr[0]},g" | sed "s,##RELEASE##,${draddr[1]},g")
      packages_url="${url_c}/binary-${ARCH}/Packages.gz"
      sources_url="${url_c}/source/Sources.gz"

      build_publish "${draddr[0]}" "${draddr[1]}" "$packages_url" "$sources_url"
    else
      echo "Skipping building for ${draddr[0]}, ${draddr[1]} b/c a restricted list of build distributions was given"
    fi
  done

  post_build_sleep=35m
  echo "Pushed all packages for indexing, sleeping for ${post_build_sleep}"
  sleep $post_build_sleep
done
