#!/bin/bash -x

#
# TODO: improvements:
# 1. Make agent smarter, it should parse the horizon-pkg changelog and build+push all old versions
# 2. Improve error handling

usage="Usage: $0 sleep_s prj_dir repo_url_stub_templ publish_destination_stub"

if [[ $# -lt 4 ]]; then
  (>&2 echo "Missing required argument(s). $usage")
  exit 1
fi

sleep_s=$1
prj_dir="$2"
repo_url_stub_templ="$3"
publish_destination_stub="$4"

VERSION=""
ARCH=""
DIST_RELEASE=""
TMPDIR=${TMPDIR:=/tmp}

function control_c() {
  exit 0
}

trap control_c SIGINT SIGQUIT

# depends on side effects: sets global vars
function clone_prj() {
  if [[ ! -d ${prj_dir}/.git ]]; then
    git clone https://github.com/open-horizon/horizon-pkg.git $prj_dir
  else
    (mkdir -p $prj_dir; cd $prj_dir && \
      git reset --hard HEAD && \
      git clean -df && \
      make distclean && \
      git pull)
  fi

  VERSION="$(cat ./VERSION)"
  ARCH="$(./tools/arch-tag)"
  DIST_RELEASE="$(cd $prj_dir && make show-packages | xargs -n1 | grep -oP "dist/.*~\K([^_]+)" | sort | uniq | xargs)"
}

# an empty return is an error
function artifact_versions() {
  url="$1"

  # single line of versions published, like this: "2.0.10b 2.0.7 2.0.9"
  wget -4 -q -O $TMPDIR/horizon-pkgs.gz "${url}" 2> /dev/null
  ret=$?
  if [[ $ret == 8 ]] || [[ "$(zcat $TMPDIR/horizon-pkgs.gz)" == "" ]]; then
    # a server error, perhaps a 404, or empty file: let it build and attempt later push
    echo "-99"
    return
  elif [[ $ret > 0 ]]; then
    (>&2 echo "Failed to determine existing deb package versions.")
    echo ""
    return
  else
    echo $(zcat $TMPDIR/horizon-pkgs.gz | grep -oP 'Version: \K([^~]+)' | sort | uniq | xargs)
    return
  fi
}

# an empty return indicates version not found
function indexed_or_queued() {
  # to pass this check, the $VERSION has to be in the URL
  url="$1"

  # to pass this check, all files in list have to be in publish_dest
  publish_dest="$2"
  files="${@:3}"

  versions=$(artifact_versions "$url")
  if [[ $? > 0 ]]; then
    (>&2 echo "Error checking if artifact is indexed.")
    echo ""
    return
  fi

  echo "$versions" | grep -q "$VERSION"
  if [[ $? == 0 ]]; then
    # already in index, don't need to build this version
    echo ""
    return
  fi

  # this version not indexed but could be queued for indexing, check before returning that it should be built
  queued=$(rsync -nr --out-format='%n' ${publish_dest}/ /dev/false)
  for ix in $files; do
    if ! echo "$queued" | grep -q $ix; then
      # already queued, don't need to build this version
      echo ""
      return
    fi
  done

  # indicates this version needs to be built
  echo "$VERSION"
}

function build_publish() {
  dist="$1"
  rel="$2"
  packages_url="$3"
  sources_url="$4"

  expected_binaries="horizon_$(VERSION)_$(ARCH).changes horizon_$(VERSION)_$(ARCH).deb bluehorizon_$(VERSION)_$(ARCH).deb"
  expected_sources="horizon_$(VERSION).debian.tar.xz horizon_$(VERSION).dsc horizon_$(VERSION).orig.tar.gz"
  upload_destination="${publish_destination_stub}/${dist}.${rel}/"

  if [[ "$(indexed_or_queued "$packages_url" "${upload_destination}" $expected_binaries)" == "$VERSION" ]]; then
    echo "$VERSION not yet indexed for our architecture ($ARCH). Building package and submitting it to queue."
    (
      cd $prj_dir
      mkdir -p bld
      echo "GOPATH_CACHE=/root/go/.cache" > bld/anax-rules.env
      make mostlyclean $(make show-packages | xargs -n1 | grep "$rel" | xargs) git_repo_prefix=https://github.com/open-horizon verbose=y

      # ignore-existing ensures that this doesn't overwrite previously-written files of the same name
      for f in $expected_binaries; do
        rsync -avz --ignore-existing --progress --stats ${prj_dir}/dist/$f "${upload_destination}"
      done

      # check for already-uploaded source stuff b/c it's common b/n architectures and may have already been uploaded
      if [[ "$(indexed_or_queued "$packages_url" "${upload_destination}" $expected_sources)" == "$VERSION" ]]; then
        for f in $expected_sources; do
          rsync -avz --ignore-existing --progress --stats ${prj_dir}/dist/$f "${upload_destination}"
        done
      else
        echo "$VERSION sources already indexed or in queue."
      fi
    )
  else
    echo "$VERSION binaries already indexed for our architecture ($ARCH) or in queue."
  fi
}

while true; do
  # build check interval
  sleep $sleep_s

  clone_prj

  for dr in ${DIST_RELEASE}; do
    IFS='.' read -ra draddr <<< "$dr"
    url_c=$(echo "$repo_url_stub_templ" | sed "s,##DIST##,${draddr[0]},g" | sed "s,##RELEASE##,${draddr[1]},g")
    packages_url="${url_c}/binary-${ARCH}/Packages.gz"
    sources_url="${url_c}/source/Sources.gz"

    build_publish "${draddr[0]}" "${draddr[1]}" "$packages_url" "$sources_url"
  done

  post_build_sleep=35m
  echo "Pushed all packages for indexing, sleeping for ${post_build_sleep}"
  sleep $post_build_sleep
done
